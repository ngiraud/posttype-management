<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;
use NGiraud\PostType\Interfaces\PostType;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

/**
 * Class {{class}}
 * @mixin \Eloquent
 */
class {{class}} extends Model implements PostType
{
    use SoftDeletes, HasSlug;

    protected $table = '{{table}}';

    protected $guarded = ['id'];

    protected $dates = ['deleted_at', 'published_at'];

    protected static function boot()
    {
        parent::boot();

        static::saving(function ($item) {
            if (Auth::check()) {
                $item->user_id = Auth::id();
            }
        });
    }

    /**
     * Get the options for generating the slug.
     */
    public function getSlugOptions() : SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('name')
            ->saveSlugsTo('slug')
            ->slugsShouldBeNoLongerThan(50)
            ->usingSeparator('-')
            ->usingLanguage(config('app.locale'))
            ->doNotGenerateSlugsOnUpdate();
    }

    public function rules()
    {
        return [
            'name' => 'required|min:2|max:255',
            'content' => 'nullable',
            'excerpt' => 'nullable',
            'published_at' => 'nullable|date',
            'parent_id' => 'nullable|integer',
            'status' => $this->ruleStatus()
        ];
    }

    public function ruleStatus()
    {
        return 'in:' . implode(',', [self::STATUS_DRAFT, self::STATUS_PUBLISHED]);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function parent()
    {
        return $this->belongsTo(self::class, 'parent_id');
    }

    public function children()
    {
        return $this->hasMany(self::class, 'parent_id');
    }
}